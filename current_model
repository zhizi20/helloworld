UNet(
  (noise_level_mlp): Sequential(
    (0): PositionalEncoding()
    (1): Linear(in_features=64, out_features=256, bias=True)
    (2): Swish()
    (3): Linear(in_features=256, out_features=64, bias=True)
  )
  (downs): ModuleList(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1-4): 4 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
    )
    (5): Downsample(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (6): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=128, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7-9): 3 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=128, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
    )
    (10): Downsample(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (11): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=256, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12-14): 3 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=256, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
    )
    (15): Downsample(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (16): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (17-19): 3 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
    )
    (20): Downsample(
      (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (21-24): 4 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
      (attn): SelfAttention(
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mid): ModuleList(
    (0): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
      (attn): SelfAttention(
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
    )
  )
  (ups): ModuleList(
    (0-4): 5 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (attn): SelfAttention(
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Upsample(
      (up): Upsample(scale_factor=2.0, mode='nearest')
      (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (6-9): 4 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=512, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 768, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Upsample(
      (up): Upsample(scale_factor=2.0, mode='nearest')
      (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (12): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=256, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 768, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (13-15): 3 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=256, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 512, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (16): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=256, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 384, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (17): Upsample(
      (up): Upsample(scale_factor=2.0, mode='nearest')
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (18): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=128, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 384, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (19-21): 3 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=128, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 256, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (22): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=128, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 192, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (23): Upsample(
      (up): Upsample(scale_factor=2.0, mode='nearest')
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (24): ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 192, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (25-28): 4 x ResnetBlocWithAttn(
      (res_block): ResnetBlock(
        (noise_func): FeatureWiseAffine(
          (noise_func): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
          )
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(32, 128, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(32, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Dropout(p=0.2, inplace=False)
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (final_conv): Block(
    (block): Sequential(
      (0): GroupNorm(32, 64, eps=1e-05, affine=True)
      (1): Swish()
      (2): Identity()
      (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)
(dndp) qinyang@dinglab-v100:~/zhizi/Dn-Dp-main/Dn-Dp-main$ 
